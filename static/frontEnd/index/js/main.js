/*
	Prologue by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
*/

(function($) {

	var	$window = $(window),
		$body = $('body'),
		$nav = $('#nav');

	// Breakpoints.
		breakpoints({
			wide:      [ '961px',  '1880px' ],
			normal:    [ '961px',  '1620px' ],
			narrow:    [ '961px',  '1320px' ],
			narrower:  [ '737px',  '960px'  ],
			mobile:    [ null,     '736px'  ]
		});

	// Play initial animations on page load.
		$window.on('load', function() {
			window.setTimeout(function() {
				$body.removeClass('is-preload');
			}, 100);
		});

		// Toggle.
			$('<div id="headerToggle">' +
					'<a href="#header" class="toggle"></a>' +
					'</div>')
			.appendTo($body);

		// Î©îÎâ¥ Ìå®ÎÑê ÏÑ§Ï†ï
			$('#header').panel({
				delay: 500,
				hideOnClick: true,
				hideOnSwipe: true,
				resetScroll: true,
				resetForms: true,
				side: 'left',
				target: $body,
				visibleClass: 'header-visible'
			});

		// Header.
			$('#header')
				.panel({
					delay: 500,
					hideOnClick: true,
					hideOnSwipe: true,
					resetScroll: true,
					resetForms: true,
					side: 'left',
					target: $body,
					visibleClass: 'header-visible'
				});

})(jQuery);



// ÎπÑÎîîÏò§ Î∂ÑÎ¶¨ ÏöîÏ≤≠ÌõÑ Ìè¥ÎßÅ Î∞©ÏãùÏù∏ 30Ï¥à Îã®ÏúÑÎ°ú ÏôÑÎ£åÌñàÎÇò ÌôïÏù∏
document.addEventListener('DOMContentLoaded', () => {
	const videoFileInput = document.getElementById('videoFile');
	const uploadButton = document.getElementById('uploadButton');
	const uploadContainer = document.querySelector('.card'); // ÏóÖÎ°úÎìú ÏòÅÏó≠
	const inputContainer = document.querySelector('.input-container');
	const progressText = document.getElementById('progressText');

	videoFileInput.addEventListener('change', () => {
		if (videoFileInput.files.length > 0) {
			uploadButton.disabled = false;
		}
	});

	uploadButton.addEventListener('click', async () => {
		if (videoFileInput.files.length === 0) return;

		const file = videoFileInput.files[0];
		console.log('Uploading:', file.name);

		uploadButton.disabled = true;
		inputContainer.style.display = 'none'; // ÌååÏùº ÏÑ†ÌÉù Ïà®ÍπÄ
		uploadButton.style.display = 'none'; // ÏóÖÎ°úÎìú Î≤ÑÌäº Ïà®ÍπÄ

		// üõ†Ô∏è Î°úÎî© UI Ï∂îÍ∞Ä
		uploadContainer.innerHTML += `
    <div id="loading-spinner">
        <img src="/static/frontEnd/index/gif/duck.gif" alt="Loading..." width="150">
        <p class="processing-text">Processing...</p>
    </div>
		`;

		const formData = new FormData();
		formData.append('video', file);

		try {
			const response = await fetch('http://127.0.0.1:5000/video/split', {
				method: 'POST',
				body: formData,
			});

			if (response.ok) {
				const data = await response.json();
				const taskId = data.task_id;
				console.log(`Task ID: ${taskId}`);

				await pollTaskStatus(taskId);
			} else {
				console.error('Upload failed:', await response.text());
				alert('Upload failed. Please try again.');
			}
		} catch (error) {
			console.error('Error:', error);
			alert('An error occurred. Please try again.');
		}
	});
});

// 30Ï¥à Îã®ÏúÑ Ìè¥ÎßÅ
async function pollTaskStatus(taskId) {
	const pollingUrl = `http://127.0.0.1:5000/video/split/task-status/${taskId}`;
	let polling = true;

	while (polling) {
		try {
			const response = await fetch(pollingUrl);
			if (response.ok) {
				const statusData = await response.json();
				console.log('Polling response:', statusData);

				if (statusData.state === 'PENDING') {
					console.log('Task is still pending. Retrying in 30 seconds...');
					await wait(30000);
				} else if (statusData.state === 'SUCCESS') {
					console.log('Task completed successfully:', statusData);

					// üéâ Î°úÎî© UI Ï†úÍ±∞ ÌõÑ ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌëúÏãú
					document.getElementById('loading-spinner').innerHTML = `
							<p class="success-text">‚úÖ Video Split Successful!</p>
					`;

					polling = false;
				} else {
					console.error('Unexpected task state:', statusData.state);
					alert(`Task failed with state: ${statusData.state}`);
					polling = false;
				}
			} else {
				console.error('Failed to fetch task status:', await response.text());
				alert('Failed to fetch task status. Stopping polling.');
				polling = false;
			}
		} catch (error) {
			console.error('Error during polling:', error);
			alert('An error occurred during polling. Stopping.');
			polling = false;
		}
	}
}

function wait(ms) {
	return new Promise((resolve) => setTimeout(resolve, ms));
}

// ÏôºÏ™Ω Î©îÎâ¥ÌåêÏóê ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏôÄ ÏùºÏπòÌïòÎäî Î©îÎâ¥ Ìï≠Î™© Í∞ïÏ°∞
document.addEventListener("DOMContentLoaded", () => {
	const currentPath = window.location.pathname; // ÌòÑÏû¨ URLÏùò Í≤ΩÎ°ú

	// Î©îÎâ¥ Ìï≠Î™©Îì§ÏùÑ ÏÑ†ÌÉù
	const menuItems = document.querySelectorAll("#nav ul li a");

	menuItems.forEach((menuItem) => {
		if (menuItem.getAttribute("href") === currentPath) {
			menuItem.classList.add("active"); // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏôÄ ÏùºÏπòÌïòÎäî Î©îÎâ¥Ïóê active Ï∂îÍ∞Ä
		}
	});
});


//  ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
document.addEventListener('DOMContentLoaded', () => {
	const promptForm = document.getElementById('promptForm');

	promptForm.addEventListener('submit', async (e) => {
		e.preventDefault();

		const promptText = promptForm.querySelector('textarea[name="prompt"]').value;

		try {
			const response = await fetch('http://127.0.0.1:5000/prompt/save', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					prompt: promptText
				})
			});

			if (response.ok) {
				alert('Prompt saved successfully!');
				promptForm.reset();
			} else {
				alert('Failed to save prompt. Please try again.');
			}
		} catch (error) {
			console.error('Error:', error);
			alert('An error occurred while saving the prompt.');
		}
	});
});



// ÌîÑÎ°¨ÌîÑÌä∏ Î™©Î°ù Î°úÎî©
document.addEventListener('DOMContentLoaded', async () => {
	const promptListContainer = document.getElementById('promptListContainer');
	const modal = document.getElementById('promptModal');
	const closeButton = document.querySelector('.close-button');
	let isEditMode = false;

	// Modal Îã´Í∏∞ Ìï®Ïàò
	const closeModal = () => {
		if (isEditMode) {
			if (confirm('There are unsaved changes. Are you sure you want to close?')) {
				isEditMode = false;
				modal.classList.remove('show-modal');
				setTimeout(() => {
					modal.style.display = 'none';
				}, 250);
			}
		} else {
			modal.classList.remove('show-modal');
			setTimeout(() => {
				modal.style.display = 'none';
			}, 250);
		}
	};

	// Modal Ïó¥Í∏∞ Ìï®Ïàò
	const openModal = (prompt) => {
		isEditMode = false;
		document.getElementById('modalTitle').textContent = prompt.title;

		const modalBody = document.createElement('div');
		modalBody.className = 'modal-body';

		// Î≤ÑÌäº Ïª®ÌÖåÏù¥ÎÑà ÏÉùÏÑ±
		const buttonContainer = document.createElement('div');
		buttonContainer.className = 'modal-button-container';

		// ÏàòÏ†ï Î≤ÑÌäº ÏÉùÏÑ±
		const editButton = document.createElement('button');
		editButton.textContent = 'update';
		editButton.className = 'modal-edit-button';

		// ÏÇ≠Ï†ú Î≤ÑÌäº ÏÉùÏÑ±
		const deleteButton = document.createElement('button');
		deleteButton.textContent = 'delete';
		deleteButton.className = 'modal-delete-button';

		// ÏàòÏ†ï Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
		editButton.onclick = () => {
			isEditMode = true;
			const promptContent = modalBody.querySelector('.prompt-content');
			const originalText = promptContent.textContent;

			const editContainer = document.createElement('div');
			editContainer.className = 'edit-container';

			editContainer.innerHTML = `
                <textarea class="modal-edit-textarea">${originalText}</textarea>
                <div class="modal-edit-buttons">
                    <button id="saveButton" class="modal-save-button">save</button>
                    <button id="cancelButton" class="modal-cancel-button">cancle</button>
                </div>
            `;

			promptContent.replaceWith(editContainer);

			editContainer.querySelector('#saveButton').onclick = () => savePrompt(prompt.prompt_id);
			editContainer.querySelector('#cancelButton').onclick = () => cancelEdit();
		};

		// ÏÇ≠Ï†ú Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
		deleteButton.onclick = async () => {
			if (prompt.prompt_id && confirm('Are you sure you want to delete this prompt?')) {
				try {
					const response = await fetch(`http://127.0.0.1:5000/prompt/delete/${prompt.prompt_id}`, {
						method: 'DELETE'
					});
					if (response.ok) {
						alert('Prompt has been deleted successfully.');
						closeModal();
						location.reload();
					}
				} catch (error) {
					console.error('Delete error:', error);
					alert('An error occurred while deleting.');
				}
			}
		};

		buttonContainer.appendChild(editButton);
		buttonContainer.appendChild(deleteButton);

		modalBody.innerHTML = `
            <p><strong>Creation date:</strong> ${new Date(prompt.created_at).toLocaleString()}</p>
            <p><strong>Modification date:</strong> ${new Date(prompt.updated_at).toLocaleString()}</p>
            <p><strong>prompt content:</strong></p>
            <div class="prompt-content">${prompt.prompt_text}</div>
        `;

		const modalContent = modal.querySelector('.modal-content');
		const existingBody = modal.querySelector('.modal-body');
		if (existingBody) {
			existingBody.remove();
		}
		modalContent.appendChild(buttonContainer);
		modalContent.appendChild(modalBody);

		modal.style.display = 'block';
		setTimeout(() => {
			modal.classList.add('show-modal');
		}, 10);
	};

	// Ï∑®ÏÜå Î≤ÑÌäºÏö© Ï†ÑÏó≠ Ìï®Ïàò Ï∂îÍ∞Ä
	window.cancelEdit = () => {
		if (confirm('Are you sure you want to cancel the changes?')) {
			isEditMode = false;
			location.reload(); // ÎòêÎäî ÏõêÎûò ÏÉÅÌÉúÎ°ú ÎêòÎèåÎ¶¨Îäî Î°úÏßÅ Íµ¨ÌòÑ
		}
	};

	// Ï†ÄÏû• Ìï®Ïàò ÏàòÏ†ï
	window.savePrompt = async (promptId) => {
		const textarea = modal.querySelector('textarea');
		const updatedText = textarea.value;

		try {
			const response = await fetch('http://127.0.0.1:5000/prompt/update', {
				method: 'PUT',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					promptId: promptId,
					updatePrompt: updatedText
				})
			});

			if (response.ok) {
				isEditMode = false; // Ï†ÄÏû• ÏÑ±Í≥µÏãú ÏàòÏ†ï Î™®Îìú Ìï¥Ï†ú
				alert('Prompt has been updated successfully.');
				location.reload();
			}
		} catch (error) {
			console.error('Update error:', error);
			alert('An error occurred while updating.');
		}
	};

	// Îã´Í∏∞ Î≤ÑÌäº Ïù¥Î≤§Ìä∏
	closeButton.addEventListener('click', closeModal);

	// Î™®Îã¨ Î∞îÍπ• ÌÅ¥Î¶≠Ïãú Îã´Í∏∞
	window.addEventListener('click', (e) => {
		if (e.target === modal) {
			closeModal();
		}
	});

	// ESC ÌÇ§Î°ú Î™®Îã¨ Îã´Í∏∞
	document.addEventListener('keydown', (e) => {
		if (e.key === 'Escape' && modal.style.display === 'block') {
			closeModal();
		}
	});

	try {
		const response = await fetch('http://127.0.0.1:5000/prompt/search');
		const data = await response.json();

		const colDiv = document.createElement('div');
		colDiv.className = 'col-12';

		const flexContainer = document.createElement('div');
		flexContainer.style.display = 'flex';
		flexContainer.style.flexWrap = 'wrap';
		flexContainer.style.gap = '20px';
		flexContainer.style.justifyContent = 'flex-start';

		data.prompts.forEach(prompt => {
			const article = document.createElement('article');
			article.className = 'item';
			article.style.width = 'calc(25% - 15px)';
			article.style.marginBottom = '20px';
			article.style.cursor = 'pointer';

			article.innerHTML = `
        <header>
          <h3>${prompt.title}</h3>
        </header>
      `;

			article.addEventListener('click', () => {
				openModal(prompt);
			});

			flexContainer.appendChild(article);
		});

		colDiv.appendChild(flexContainer);
		promptListContainer.appendChild(colDiv);

	} catch (error) {
		console.error('Failed to load prompt list:', error);
	}
});
